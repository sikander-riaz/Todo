name: Vite Todo CI//CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # CI Job
  ci:
    name: Build & Test
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build with Vite
        run: npm run build
        env:
          VITE_APP_VERSION: ${{ github.run_number }}
          VITE_COMMIT_SHA: ${{ github.sha }}

      - name: ðŸ“¦ Create deployment package
        run: |
          # (your existing packaging script...)
          tar -czf vite-todo.tar.gz -C dist .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vite-todo-${{ github.sha }}
          path: vite-todo.tar.gz

      - name: Build Docker image
        run: docker build -t siku9786/vite-todo:${{ github.sha }} .

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push siku9786/vite-todo:${{ github.sha }}

  # CD Job
  cd:
    name: Deploy to EC2
    needs: ci
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: vite-todo-${{ github.sha }}

      - name: Deploy application
        run: |
          DEPLOY_DIR="/home/$USER/vite-todo"

          echo " Setting up deployment directory..."
          mkdir -p $DEPLOY_DIR
          cd $DEPLOY_DIR

          echo "Extracting application..."
          tar -xzf $GITHUB_WORKSPACE/vite-todo.tar.gz

          echo "Installing dependencies..."
          npm install --production

          echo "Stopping existing application..."
          pkill -f "node.*server.js" || true
          sleep 3

          echo " Starting new application..."
          nohup npm start > app.log 2>&1 &

          echo " Waiting for application to start..."
          sleep 5

          echo " Running health checks..."
          max_attempts=12
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "Application is healthy!"
              echo ""
              echo " DEPLOYMENT SUCCESS!"
              echo "App URL: http://$(curl -s ifconfig.me):3000"
              echo " Health Check: http://$(curl -s ifconfig.me):3000/api/health"
              echo ""
              echo " Health Response:"
              curl -s http://localhost:3000/api/health | jq . 2>/dev/null || curl -s http://localhost:3000/api/health
              echo ""
              exit 0
            else
              echo " Attempt $attempt/$max_attempts: App not ready yet..."
              sleep 3
              attempt=$((attempt + 1))
            fi
          done

          echo " DEPLOYMENT FAILED!"
          echo " Application logs:"
          tail -n 30 app.log
          echo ""
          echo " Process check:"
          ps aux | grep node || echo "No node processes found"
          exit 1
